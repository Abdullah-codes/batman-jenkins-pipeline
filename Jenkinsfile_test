#!/usr/bin/groovy

pipeline {
    agent any

    options {
        disableConcurrentBuilds()
    }
    
	

    stages {

        stage("Build") {
            steps { buildApp() }
		}

        stage('para'){
            parallel{
                stage("Test-pylint") {
	    	        steps { testPylint('pylint') }
		        }
                stage("Test") {
	    	        steps { testApp('test') }
		        }
            }
        }

        // stage("Deploy - Dev") {
        //     steps { deploy('dev') }
		// }
        stage('master-branch-stuff'){
			when {
				expression {env.GIT_BRANCH == 'origin/main'}
			}
			steps { deploy('dev') }
			
		}
		
	}
}


// steps
def buildApp() {
	dir ('.' ) {
		def appImage = docker.build("batman-app-image:${BUILD_NUMBER}")
	}
	sh "env"
}


def testPylint(environment) {

	def containerName = ''
	

	if ("${environment}" == 'pylint') {
		containerName = "app_test_pylint"
		
	} 
	else {
		println "Environment not valid"
		System.exit(0)
	}

	sh "docker run  --rm --name ${containerName} batman-app-image:${BUILD_NUMBER} pylint app.py"

}

def testApp(environment) {

	def containerName = ''
	

	if ("${environment}" == 'test') {
		containerName = "app_test"
		
	} 
	else {
		println "Environment not valid"
		System.exit(0)
	}

	sh "docker run  --rm --name ${containerName} batman-app-image:${BUILD_NUMBER} pytest"

}


def deploy(environment) {

	def containerName = ''
	def port = ''

	if ("${environment}" == 'dev') {
		containerName = "app_dev"
		port = "8888"
	} 
	else {
		println "Environment not valid"
		System.exit(0)
	}

	sh "docker ps -f name=${containerName} -q | xargs --no-run-if-empty docker stop"
	sh "docker ps -a -f name=${containerName} -q | xargs -r docker rm"
	sh "docker run -d -p ${port}:5000 --name ${containerName} batman-app-image:${BUILD_NUMBER}"

}


